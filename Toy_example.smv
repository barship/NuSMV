MODULE client(env,init_balance)
  VAR
    balance : 0..env.INT_MAX;
    data : word[64];

  ASSIGN
    init(balance) := init_balance;
    init(data) := 0uh64_0;

  TRANS !will_move -> conserve;

  DEFINE 
    conserve := (next(balance) = balance)
             &  (next(data) = 0h64_0);

MODULE transaction(env,cond,snder,rcver,
                   amount,data)
    VAR fired : boolean;

    ASSIGN
      init(fired) := FALSE;
      next(fired) := case
        trigger : TRUE;
        !cond : FALSE;
        TRUE : fired;
        esac;

    TRANS trigger -> (next(snder.data) = 0h64_0)
&   (next(snder.balance) = snder.balance - amount)
&   (next(rcver.data) = resize(data,64))
&   (next(rcver.balance) = rcver.balance + amount);

    DEFINE trigger := (!fired & cond
&   (snder.balance >= amount)
&   (env.INT_MAX - amount >= rcver.balance));

MODULE Toy_example(env) 
  VAR 
    c: client(env,0);
    a: 0..env.INT_MAX;

  ASSIGN
    init(a) := 0;
    next(a) := case
      next(call_foo & b) : 42;
      next(call_foo & !b) : 0;
      TRUE : a;
      esac;

  DEFINE
    call_foo := (c.data[32:1] = 0h_45557578);
    b := bool(c.data[0:0]);

MODULE main
  VAR 
    _b : boolean;
    toy : Toy_example(self);
    oracle : client(self,0);
    tx : transaction(self,_cond,oracle,
         toy.c,0,foo_selector::word1(_b));

  ASSIGN init(_b) := FALSE;
  TRANS tx.fired -> _b = next(_b);

  DEFINE
    INT_MAX := 100;
    oracle.will_move := tx.trigger;
    toy.c.will_move := tx.trigger;
    foo_selector := 0h_45557578;
    _cond := (_b != next(_b));

  SPEC AG (_b -> (toy.a = 42));